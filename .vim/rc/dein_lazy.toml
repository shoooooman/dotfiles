# „Ç´„É©„Éº„Çπ„Ç≠„Éº„É†„Å´solarized„ÇíË®≠ÂÆö„Åô„Çã
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    syntax enable
    set background=dark
    colorscheme solarized
    highlight SignColumn ctermbg=Black
    " highlight link LspErrorHighlight Underlined
    " highlight link LspWarningHighlight Underlined
    " highlight link LspInformationHighlight Underlined
    " highlight link LspHintHighlight Underlined
'''

# Language Server for vim
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    set signcolumn=yes

    " LSP commands
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gn <plug>(lsp-next-diagnostic)
    nmap <buffer> gN <plug>(lsp-previous-diagnostic)
    nmap <buffer> gs <plug>(lsp-rename)
    nmap <buffer> K <plug>(lsp-hover)

    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_diagnostics_echo_delay = 200
    let g:lsp_diagnostics_highlights_enabled = 1
    " let g:lsp_diagnostics_float_cursor = 1
    let g:lsp_diagnostics_signs_error = {'text': '‚úó'}
    let g:lsp_diagnostics_signs_warning = {'text': '‚ö†'}
    let g:lsp_diagnostics_signs_hint = {'text': 'üí°'}

    let g:lsp_document_code_action_signs_enabled = 0
'''

# Auto settings for vim-lsp
[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
    let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
    let g:lsp_settings_filetype_javascript = ['typescript-language-server', 'efm-langserver']
'''

# for deoplete
[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '''!has('nvim')'''

# for deoplete
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '''!has('nvim')'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = [ 'nvim-yarp', 'vim-hug-neovim-rpc' ]
on_source = [ 'deoplete-vim-lsp' ]
hook_add = '''
    let g:deoplete#enable_at_startup = 1

    " No display of the number of competion list
    set shortmess+=c

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#manual_complete()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    " <C-e>: popup cancel
    inoremap <expr><C-e>       deoplete#cancel_popup()
'''
hook_source = '''
    call deoplete#custom#option({
    \ 'min_pattern_length': 1,
    \ 'auto_complete': v:true,
    \ 'auto_complete_delay': 0,
    \ 'auto_refresh_delay': 20,
    \ 'refresh_always': v:true,
    \ 'smart_case': v:true,
    \ 'camel_case': v:true,
    \ })

    " use lsp as a deoplete source
    call deoplete#custom#option('sources', {
    \ '_': ['buffer', 'lsp', 'file'],
    \ 'javascript': [],
    \ 'vim': ['vim', 'buffer', 'dictionary', 'file'],
    \ })

    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    call deoplete#custom#source('_', 'converters', [
    \ 'converter_remove_paren',
    \ 'converter_remove_overlap',
    \ 'matcher_length',
    \ 'converter_truncate_abbr',
    \ 'converter_truncate_menu',
    \ 'converter_auto_delimiter',
    \ ])

    call deoplete#custom#option('keyword_patterns', {
    \ '_': '[a-zA-Z_]\k*\(?',
    \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
    \ })
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_ft = ['snippet']
depends = [ 'neosnippet-snippets' ]
hook_add = '''
    let g:neosnippet#snippets_directory='~/.vim/snippets'
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

# create surrounding tags
[[plugins]]
repo = 'tpope/vim-surround'

# html5 syntax
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# auto close tag
[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:closetag_filetypes = 'html,javascript,javascriptreact,typescript,typescriptreact'
'''

# html auto generator
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_settings = {
    \ 'variables' : {
    \  'lang' : "ja"
    \ }
    \}
'''
on_ft = ['html']

# JavaScript Syntax
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']

# TypeScript syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# JSX syntax and indent
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:vim_jsx_pretty_colorful_config = 1
'''

# JavaScript (incl. React) syntax and indent
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']

# ECMAScript syntax
[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
    let b:javascript_lib_use_jquery = 1
    let b:javascript_lib_use_underscore = 1
    let b:javascript_lib_use_react = 1
    let b:javascript_lib_use_flux = 1
    let b:javascript_lib_use_jasmine = 1
    let b:javascript_lib_use_d3 = 1
'''

# TOML syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# arduino syntax highlight
[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']

# plantuml syntax
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']
