# カラースキームにsolarizedを設定する
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    syntax enable
    set background=dark
    colorscheme solarized
    highlight SignColumn ctermbg=Black
    " highlight link LspErrorHighlight Underlined
    " highlight link LspWarningHighlight Underlined
    " highlight link LspInformationHighlight Underlined
    " highlight link LspHintHighlight Underlined
'''

## Completion #################################
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = [ 'denops.vim' ]
on_event = 'InsertEnter'
hook_source = '''
    call ddc#custom#patch_global('sources', ['vim-lsp', 'around', 'file'])

    " Use matcher_head and sorter_rank.
    call ddc#custom#patch_global('sourceOptions', {
          \ '_': {
          \   'matchers': ['matcher_head'],
          \   'sorters': ['sorter_rank']},
          \ })

    " Change source options
    call ddc#custom#patch_global('sourceOptions', {
          \ 'vim-lsp': {
          \   'mark': 'lsp',
          \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
          \ },
          \ 'around': {'mark': 'around'},
          \ 'file': {
          \   'mark': 'file',
          \   'isVolatile': v:true,
          \   'forceCompletionPattern': '\S/\S*',
          \ },
          \ })

    " Mappings

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
    \ pumvisible() ? '<C-n>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#map#manual_complete()

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

    " Use ddc
    call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = [ 'vim-lsp', 'ddc.vim' ]

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_ft = ['snippet']
depends = [ 'neosnippet-snippets' ]
hook_add = '''
    let g:neosnippet#snippets_directory='~/.vim/snippets'
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

# create surrounding tags
[[plugins]]
repo = 'tpope/vim-surround'

# html5 syntax
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# auto close tag
[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:closetag_filetypes = 'html,javascript,javascriptreact,typescript,typescriptreact'
'''

# html auto generator
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_settings = {
    \ 'variables' : {
    \  'lang' : "ja"
    \ }
    \}
'''
on_ft = ['html']

# JavaScript Syntax
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']

# TypeScript syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# JSX syntax and indent
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:vim_jsx_pretty_colorful_config = 1
'''

# JavaScript (incl. React) syntax and indent
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']

# ECMAScript syntax
[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascriptreact', 'typescript', 'typescriptreact']
hook_add = '''
    let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
    let b:javascript_lib_use_jquery = 1
    let b:javascript_lib_use_underscore = 1
    let b:javascript_lib_use_react = 1
    let b:javascript_lib_use_flux = 1
    let b:javascript_lib_use_jasmine = 1
    let b:javascript_lib_use_d3 = 1
'''

# TOML syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# arduino syntax highlight
[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']

# plantuml syntax
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']
