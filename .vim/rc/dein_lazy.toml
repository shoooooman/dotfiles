[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = [ 'nvim-yarp', 'vim-hug-neovim-rpc' ]
hook_source = '''
    " call deoplete#enable()
    let g:deoplete#enable_at_startup = 1
    " let g:deoplete#auto_complete_delay = 0
    " let g:deoplete#auto_complete_start_length = 1
    " No display of the number of competion list
    set shortmess+=c

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#manual_complete()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    " <C-e>: popup cancel
    inoremap <expr><C-e>       deoplete#cancel_popup()

    call deoplete#custom#source('_', 'matchers', ['matcher_head'])
    call deoplete#custom#source('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'matcher_length',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])
    call deoplete#custom#option('keyword_patterns', {
          \ '_': '[a-zA-Z_]\k*\(?',
          \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
          \ })
    call deoplete#custom#option('camel_case', v:true)
'''
# インサートモードに入ったとき読み込む
on_i = 1

# カラースキームにsolarizedを設定する
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  syntax enable
  set background=dark
  colorscheme solarized
'''

# Clang snippet
# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp', 'cmake']
# hook_source = '''
#     let g:deoplete#sources#clang#libclang_path = system("llvm-config --prefix")[:-2] . '/lib/libclang.dylib'
#     let g:deoplete#sources#clang#clang_header = system("llvm-config --prefix")[:-2] . '/lib/clang'
#     let g:deoplete#sources#clang#sort_algo = 'priority'
#     let g:deoplete#sources#clang#clang_complete_database="./build/"
# '''
# depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '''!has('nvim')'''

# vim scriptの補完
[[plugins]]
repo = 'Shougo/neco-vim'

# 各拡張子の補完
[[plugins]]
repo = 'Shougo/neco-syntax'

# lookコマンドによる補完
[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
hook_add = '''
    let g:neosnippet#snippets_directory='~/.vim/snippets'
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''
# インサートモードに入ったとき読み込む
on_i = 1
on_ft = ['snippet']

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    " シンボルカラムを表示したままにする
    " let g:ale_sign_column_always = 1
    " 保存時に整形してくれる
    let g:ale_fix_on_save = 1
    " 補完してくれる
    let g:ale_completion_enabled = 1
    " エラー行に表示するマーク
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_linters = {
        \   'c' : ['clangd'],
        \   'cpp' : ['clangd']
    \}
'''

# ファイルオープンを便利に
[[plugins]]
repo = 'Shougo/unite.vim'

# Unite.vimで最近使ったファイルを表示できるようにする
# repo = 'Shougo/neomru.vim'

# vim上でgit操作
[[plugins]]
repo = 'tpope/vim-fugitive'

# コメントON/OFFを手軽に実行
[[plugins]]
repo = 'tomtom/tcomment_vim'

# 括弧を自動補完
[[plugins]]
repo = 'cohama/lexima.vim'

# create surrounding tags
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    let g:go_fmt_command = "goimports"
    let g:go_metalinter_autosave = 1
'''

# html5 syntax
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# html auto generator
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_settings = {
    \ 'variables' : {
    \  'lang' : "ja"
    \ }
    \}
'''
on_ft = ['html']

# JavaScript Syntax
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'typescript']

# TypeScript syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# TOML syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# arduino syntax highlight
[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']

# plantuml syntax
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']
